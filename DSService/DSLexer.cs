//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DSLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Collections.Generic;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DSLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NL=3, STRING_START=4, STRING_CONTEXT=5, STRING_ESCAPE=6, 
		STRING_END=7, PATH=8, LPAR=9, RPAR=10, LBRACE=11, RBRACE=12, EXCLAMATION=13, 
		PLUS=14, MINUS=15, STAR=16, SLASH=17, LESS=18, GREATER=19, EQUAL=20, PERCENT=21, 
		EQEQUAL=22, NOTEQUAL=23, LESSEQUAL=24, GREATEREQUAL=25, PLUSEQUAL=26, 
		MINEQUAL=27, STAREQUAL=28, SLASHEQUAL=29, PERCENTEQUAL=30, AND=31, OR=32, 
		COLON=33, COMMA=34, CALL=35, IF=36, NOT=37, ELIF=38, ELSE=39, JUMP=40, 
		TOUR=41, LABEL=42, IMPORT=43, BOOL=44, TRUE=45, FALSE=46, NUMBER=47, ID=48, 
		TAG=49, VARIABLE=50, WS=51, LINE_COMMENT=52, ERROR_CHAR=53, NEWLINE=54, 
		EMBED_WS=55, PATH_WS=56;
	public const int
		STRING_MODE=1, EMBED_EXPR_MODE=2, PATH_MODE=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_MODE", "EMBED_EXPR_MODE", "PATH_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", "PLUS", "MINUS", "STAR", 
		"SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", 
		"LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", 
		"PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", "CALL", "IF", "NOT", "ELIF", 
		"ELSE", "JUMP", "TOUR", "LABEL", "IMPORT", "BOOL", "TRUE", "FALSE", "NUMBER", 
		"ID", "TAG", "VARIABLE", "STRING_START", "INTEGER", "FLOAT", "NON_ZERO_DIGIT", 
		"DIGIT", "DOT", "AT", "ALPHABET", "CHAR", "WS", "LINE_COMMENT", "ERROR_CHAR", 
		"NEWLINE", "EMBED_START", "STRING_ESCAPE", "STRING_CONTEXT", "STRING_END", 
		"STRING_NEWLINE", "EMBED_END", "EMBED_CALL", "EMBED_VAR", "EMBED_WS", 
		"EMBED_LPAR", "EMBED_RPAR", "EMBED_COMMA", "EMBED_ID", "EMBED_NUMBER", 
		"EMBED_BOOL", "EMBED_EXCLAMATION", "EMBED_PLUS", "EMBED_MINUS", "EMBED_STAR", 
		"EMBED_SLASH", "EMBED_LESS", "EMBED_GREATER", "EMBED_PERCENT", "EMBED_EQEQUAL", 
		"EMBED_NOTEQUAL", "EMBED_LESSEQUAL", "EMBED_GREATEREQUAL", "EMBED_AND", 
		"EMBED_OR", "EMBED_STRING_START", "PATH_WS", "QUOTED_PATH", "UNQUOTED_PATH", 
		"PATH_NEWLINE"
	};


	    private Stack<int> _indentStack = new();
	    private List<IToken> _tokenList = new();
	    private int _currentIndent = 0;
	    private IToken _pre_token = null;
		private bool _fbl = true;

	    private void HandleNewline() 
	    {
	        int newIndent = 0;
	        while (InputStream.LA(1) == ' ' || InputStream.LA(1) == '\t') 
	        {
	            newIndent += (InputStream.LA(1) == '\t') ? 4 : 1;
	            InputStream.Consume();
	        }
	        if (InputStream.LA(1) == '\r' || InputStream.LA(1) == '\n' || InputStream.LA(1) == Eof)
				return;

	        newIndent /= 4;
	        if (newIndent > _currentIndent)
	        {
	            var token = new CommonToken(INDENT, "INDENT");
	            _tokenList.Add(token);
	            _indentStack.Push(_currentIndent);
	            _currentIndent = newIndent;
	        } 
	        else if (newIndent < _currentIndent)
	        {
	            while (_currentIndent > newIndent)
	            {
	                var token = new CommonToken(DEDENT, "DEDENT");
	                _tokenList.Add(token);
	                _currentIndent = _indentStack.Count > 0 ? _indentStack.Pop() : 0;
	            }
	        }
	    }

	    public override IToken NextToken()
	    {
	        IToken token = null;
	        if (_tokenList.Count > 0)
	        {
	            token = _tokenList[0];
	            _tokenList.RemoveAt(0);
	        }
	        else
	        {
	            token = base.NextToken();
	            if (_fbl && token.Channel == 0 && token.Type != NEWLINE)
					_fbl = false;
	        }

	        if (InputStream.LA(1) == Eof)
			{
	            if (token.Type != NEWLINE && token.Type != DEDENT && _tokenList.Count == 0)
				{
					var newlineToken = new CommonToken(NEWLINE, "\n");
	                newlineToken.Line = token.Line;
					newlineToken.Column = token.Column + token.Text.Length;
					_tokenList.Add(newlineToken);
					_pre_token = token;
					return token;
				}

				while (_indentStack.Count > 0)
				{
					var tokenDedent = new CommonToken(DEDENT, "DEDENT");
					_tokenList.Add(tokenDedent);
					_indentStack.Pop();
				}
			}

	        if (_fbl && token.Type == NEWLINE)
				return NextToken();

	        if (_pre_token != null && _pre_token.Type == NEWLINE && token.Type == NEWLINE)
				return NextToken();

	        /*
	        if (token.Channel == 0)
	            System.Console.WriteLine($"[{token.Channel}] {Vocabulary.GetSymbolicName(token.Type)}: {token.Text}: {token.Line}");
	        */

	        _pre_token = token;
	        return token;
	    }


	public DSLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DSLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'('", "')'", "'{'", 
		"'}'", "'!'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'='", "'%'", 
		"'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		null, null, "':'", "','", "'call'", "'if'", "'not'", "'elif'", "'else'", 
		null, null, null, "'import'", null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NL", "STRING_START", "STRING_CONTEXT", "STRING_ESCAPE", 
		"STRING_END", "PATH", "LPAR", "RPAR", "LBRACE", "RBRACE", "EXCLAMATION", 
		"PLUS", "MINUS", "STAR", "SLASH", "LESS", "GREATER", "EQUAL", "PERCENT", 
		"EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "PLUSEQUAL", "MINEQUAL", 
		"STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AND", "OR", "COLON", "COMMA", 
		"CALL", "IF", "NOT", "ELIF", "ELSE", "JUMP", "TOUR", "LABEL", "IMPORT", 
		"BOOL", "TRUE", "FALSE", "NUMBER", "ID", "TAG", "VARIABLE", "WS", "LINE_COMMENT", 
		"ERROR_CHAR", "NEWLINE", "EMBED_WS", "PATH_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DSLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DSLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 54 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  HandleNewline();  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,56,570,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,
		2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
		2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
		2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
		2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
		2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,
		2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,
		2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,
		2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,
		2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,
		2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,
		2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,
		2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,1,0,1,
		1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
		1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,
		1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
		1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,241,8,22,1,23,1,
		23,1,23,1,23,3,23,247,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,281,8,31,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,3,32,290,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,
		298,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,35,311,
		8,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,3,38,
		325,8,38,1,38,1,38,3,38,329,8,38,1,39,1,39,5,39,333,8,39,10,39,12,39,336,
		9,39,1,40,1,40,4,40,340,8,40,11,40,12,40,341,1,41,1,41,1,41,1,41,3,41,
		348,8,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,4,43,359,8,43,11,
		43,12,43,360,3,43,363,8,43,1,44,1,44,1,44,5,44,368,8,44,10,44,12,44,371,
		9,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
		1,51,1,51,1,51,1,52,1,52,5,52,391,8,52,10,52,12,52,394,9,52,1,52,1,52,
		1,53,1,53,1,53,1,53,1,54,3,54,403,8,54,1,54,1,54,1,54,1,55,1,55,1,55,1,
		55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,419,8,56,1,57,4,57,422,8,57,
		11,57,12,57,423,1,58,1,58,1,58,1,58,1,59,3,59,431,8,59,1,59,1,59,1,59,
		1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,
		1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,
		1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,
		1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,
		1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,
		1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,
		1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,
		1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,5,86,
		547,8,86,10,86,12,86,550,9,86,1,86,1,86,1,86,1,86,1,87,4,87,557,8,87,11,
		87,12,87,558,1,87,1,87,1,88,3,88,564,8,88,1,88,1,88,1,88,1,88,1,88,0,0,
		89,4,9,6,10,8,11,10,12,12,13,14,14,16,15,18,16,20,17,22,18,24,19,26,20,
		28,21,30,22,32,23,34,24,36,25,38,26,40,27,42,28,44,29,46,30,48,31,50,32,
		52,33,54,34,56,35,58,36,60,37,62,38,64,39,66,40,68,41,70,42,72,43,74,44,
		76,45,78,46,80,47,82,48,84,49,86,50,88,4,90,0,92,0,94,0,96,0,98,0,100,
		0,102,0,104,0,106,51,108,52,110,53,112,54,114,0,116,6,118,5,120,7,122,
		0,124,0,126,0,128,0,130,55,132,0,134,0,136,0,138,0,140,0,142,0,144,0,146,
		0,148,0,150,0,152,0,154,0,156,0,158,0,160,0,162,0,164,0,166,0,168,0,170,
		0,172,0,174,56,176,0,178,0,180,0,4,0,1,2,3,10,1,0,49,57,1,0,48,57,3,0,
		65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,9,12,12,32,32,2,
		0,10,10,13,13,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,
		116,6,0,10,10,13,13,34,34,92,92,123,123,125,125,2,0,34,34,92,92,8,0,9,
		10,13,13,32,32,34,34,42,42,60,60,62,63,124,124,582,0,4,1,0,0,0,0,6,1,0,
		0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,
		18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,
		0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,
		0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,
		1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,
		0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,
		1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,
		0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,0,
		110,1,0,0,0,0,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,1,118,1,0,0,0,1,
		120,1,0,0,0,1,122,1,0,0,0,2,124,1,0,0,0,2,126,1,0,0,0,2,128,1,0,0,0,2,
		130,1,0,0,0,2,132,1,0,0,0,2,134,1,0,0,0,2,136,1,0,0,0,2,138,1,0,0,0,2,
		140,1,0,0,0,2,142,1,0,0,0,2,144,1,0,0,0,2,146,1,0,0,0,2,148,1,0,0,0,2,
		150,1,0,0,0,2,152,1,0,0,0,2,154,1,0,0,0,2,156,1,0,0,0,2,158,1,0,0,0,2,
		160,1,0,0,0,2,162,1,0,0,0,2,164,1,0,0,0,2,166,1,0,0,0,2,168,1,0,0,0,2,
		170,1,0,0,0,2,172,1,0,0,0,3,174,1,0,0,0,3,176,1,0,0,0,3,178,1,0,0,0,3,
		180,1,0,0,0,4,182,1,0,0,0,6,184,1,0,0,0,8,186,1,0,0,0,10,188,1,0,0,0,12,
		190,1,0,0,0,14,192,1,0,0,0,16,194,1,0,0,0,18,196,1,0,0,0,20,198,1,0,0,
		0,22,200,1,0,0,0,24,202,1,0,0,0,26,204,1,0,0,0,28,206,1,0,0,0,30,208,1,
		0,0,0,32,211,1,0,0,0,34,214,1,0,0,0,36,217,1,0,0,0,38,220,1,0,0,0,40,223,
		1,0,0,0,42,226,1,0,0,0,44,229,1,0,0,0,46,232,1,0,0,0,48,240,1,0,0,0,50,
		246,1,0,0,0,52,248,1,0,0,0,54,250,1,0,0,0,56,252,1,0,0,0,58,257,1,0,0,
		0,60,260,1,0,0,0,62,264,1,0,0,0,64,269,1,0,0,0,66,280,1,0,0,0,68,289,1,
		0,0,0,70,297,1,0,0,0,72,299,1,0,0,0,74,310,1,0,0,0,76,312,1,0,0,0,78,317,
		1,0,0,0,80,324,1,0,0,0,82,330,1,0,0,0,84,337,1,0,0,0,86,343,1,0,0,0,88,
		351,1,0,0,0,90,362,1,0,0,0,92,364,1,0,0,0,94,372,1,0,0,0,96,374,1,0,0,
		0,98,376,1,0,0,0,100,378,1,0,0,0,102,380,1,0,0,0,104,382,1,0,0,0,106,384,
		1,0,0,0,108,388,1,0,0,0,110,397,1,0,0,0,112,402,1,0,0,0,114,407,1,0,0,
		0,116,418,1,0,0,0,118,421,1,0,0,0,120,425,1,0,0,0,122,430,1,0,0,0,124,
		436,1,0,0,0,126,441,1,0,0,0,128,445,1,0,0,0,130,449,1,0,0,0,132,453,1,
		0,0,0,134,457,1,0,0,0,136,461,1,0,0,0,138,465,1,0,0,0,140,469,1,0,0,0,
		142,473,1,0,0,0,144,477,1,0,0,0,146,481,1,0,0,0,148,485,1,0,0,0,150,489,
		1,0,0,0,152,493,1,0,0,0,154,497,1,0,0,0,156,501,1,0,0,0,158,505,1,0,0,
		0,160,509,1,0,0,0,162,513,1,0,0,0,164,517,1,0,0,0,166,521,1,0,0,0,168,
		525,1,0,0,0,170,529,1,0,0,0,172,533,1,0,0,0,174,538,1,0,0,0,176,542,1,
		0,0,0,178,556,1,0,0,0,180,563,1,0,0,0,182,183,5,40,0,0,183,5,1,0,0,0,184,
		185,5,41,0,0,185,7,1,0,0,0,186,187,5,123,0,0,187,9,1,0,0,0,188,189,5,125,
		0,0,189,11,1,0,0,0,190,191,5,33,0,0,191,13,1,0,0,0,192,193,5,43,0,0,193,
		15,1,0,0,0,194,195,5,45,0,0,195,17,1,0,0,0,196,197,5,42,0,0,197,19,1,0,
		0,0,198,199,5,47,0,0,199,21,1,0,0,0,200,201,5,60,0,0,201,23,1,0,0,0,202,
		203,5,62,0,0,203,25,1,0,0,0,204,205,5,61,0,0,205,27,1,0,0,0,206,207,5,
		37,0,0,207,29,1,0,0,0,208,209,5,61,0,0,209,210,5,61,0,0,210,31,1,0,0,0,
		211,212,5,33,0,0,212,213,5,61,0,0,213,33,1,0,0,0,214,215,5,60,0,0,215,
		216,5,61,0,0,216,35,1,0,0,0,217,218,5,62,0,0,218,219,5,61,0,0,219,37,1,
		0,0,0,220,221,5,43,0,0,221,222,5,61,0,0,222,39,1,0,0,0,223,224,5,45,0,
		0,224,225,5,61,0,0,225,41,1,0,0,0,226,227,5,42,0,0,227,228,5,61,0,0,228,
		43,1,0,0,0,229,230,5,47,0,0,230,231,5,61,0,0,231,45,1,0,0,0,232,233,5,
		37,0,0,233,234,5,61,0,0,234,47,1,0,0,0,235,236,5,38,0,0,236,241,5,38,0,
		0,237,238,5,97,0,0,238,239,5,110,0,0,239,241,5,100,0,0,240,235,1,0,0,0,
		240,237,1,0,0,0,241,49,1,0,0,0,242,243,5,124,0,0,243,247,5,124,0,0,244,
		245,5,111,0,0,245,247,5,114,0,0,246,242,1,0,0,0,246,244,1,0,0,0,247,51,
		1,0,0,0,248,249,5,58,0,0,249,53,1,0,0,0,250,251,5,44,0,0,251,55,1,0,0,
		0,252,253,5,99,0,0,253,254,5,97,0,0,254,255,5,108,0,0,255,256,5,108,0,
		0,256,57,1,0,0,0,257,258,5,105,0,0,258,259,5,102,0,0,259,59,1,0,0,0,260,
		261,5,110,0,0,261,262,5,111,0,0,262,263,5,116,0,0,263,61,1,0,0,0,264,265,
		5,101,0,0,265,266,5,108,0,0,266,267,5,105,0,0,267,268,5,102,0,0,268,63,
		1,0,0,0,269,270,5,101,0,0,270,271,5,108,0,0,271,272,5,115,0,0,272,273,
		5,101,0,0,273,65,1,0,0,0,274,275,5,106,0,0,275,276,5,117,0,0,276,277,5,
		109,0,0,277,281,5,112,0,0,278,279,5,45,0,0,279,281,5,62,0,0,280,274,1,
		0,0,0,280,278,1,0,0,0,281,67,1,0,0,0,282,283,5,116,0,0,283,284,5,111,0,
		0,284,285,5,117,0,0,285,290,5,114,0,0,286,287,5,45,0,0,287,288,5,62,0,
		0,288,290,5,60,0,0,289,282,1,0,0,0,289,286,1,0,0,0,290,69,1,0,0,0,291,
		292,5,108,0,0,292,293,5,97,0,0,293,294,5,98,0,0,294,295,5,101,0,0,295,
		298,5,108,0,0,296,298,5,126,0,0,297,291,1,0,0,0,297,296,1,0,0,0,298,71,
		1,0,0,0,299,300,5,105,0,0,300,301,5,109,0,0,301,302,5,112,0,0,302,303,
		5,111,0,0,303,304,5,114,0,0,304,305,5,116,0,0,305,306,1,0,0,0,306,307,
		6,34,0,0,307,73,1,0,0,0,308,311,3,76,36,0,309,311,3,78,37,0,310,308,1,
		0,0,0,310,309,1,0,0,0,311,75,1,0,0,0,312,313,5,116,0,0,313,314,5,114,0,
		0,314,315,5,117,0,0,315,316,5,101,0,0,316,77,1,0,0,0,317,318,5,102,0,0,
		318,319,5,97,0,0,319,320,5,108,0,0,320,321,5,115,0,0,321,322,5,101,0,0,
		322,79,1,0,0,0,323,325,3,16,6,0,324,323,1,0,0,0,324,325,1,0,0,0,325,328,
		1,0,0,0,326,329,3,90,43,0,327,329,3,92,44,0,328,326,1,0,0,0,328,327,1,
		0,0,0,329,81,1,0,0,0,330,334,3,102,49,0,331,333,3,104,50,0,332,331,1,0,
		0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,83,1,0,0,0,336,
		334,1,0,0,0,337,339,3,100,48,0,338,340,3,104,50,0,339,338,1,0,0,0,340,
		341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,85,1,0,0,0,343,347,5,36,
		0,0,344,345,3,82,39,0,345,346,3,98,47,0,346,348,1,0,0,0,347,344,1,0,0,
		0,347,348,1,0,0,0,348,349,1,0,0,0,349,350,3,82,39,0,350,87,1,0,0,0,351,
		352,5,34,0,0,352,353,1,0,0,0,353,354,6,42,1,0,354,89,1,0,0,0,355,363,3,
		96,46,0,356,358,3,94,45,0,357,359,3,96,46,0,358,357,1,0,0,0,359,360,1,
		0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,355,1,0,0,0,
		362,356,1,0,0,0,363,91,1,0,0,0,364,365,3,90,43,0,365,369,3,98,47,0,366,
		368,3,90,43,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,
		1,0,0,0,370,93,1,0,0,0,371,369,1,0,0,0,372,373,7,0,0,0,373,95,1,0,0,0,
		374,375,7,1,0,0,375,97,1,0,0,0,376,377,5,46,0,0,377,99,1,0,0,0,378,379,
		5,64,0,0,379,101,1,0,0,0,380,381,7,2,0,0,381,103,1,0,0,0,382,383,7,3,0,
		0,383,105,1,0,0,0,384,385,7,4,0,0,385,386,1,0,0,0,386,387,6,51,2,0,387,
		107,1,0,0,0,388,392,5,35,0,0,389,391,8,5,0,0,390,389,1,0,0,0,391,394,1,
		0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,392,1,0,0,0,
		395,396,6,52,2,0,396,109,1,0,0,0,397,398,9,0,0,0,398,399,1,0,0,0,399,400,
		6,53,2,0,400,111,1,0,0,0,401,403,5,13,0,0,402,401,1,0,0,0,402,403,1,0,
		0,0,403,404,1,0,0,0,404,405,5,10,0,0,405,406,6,54,3,0,406,113,1,0,0,0,
		407,408,3,8,2,0,408,409,1,0,0,0,409,410,6,55,4,0,410,411,6,55,5,0,411,
		115,1,0,0,0,412,413,5,92,0,0,413,419,7,6,0,0,414,415,5,123,0,0,415,419,
		5,123,0,0,416,417,5,125,0,0,417,419,5,125,0,0,418,412,1,0,0,0,418,414,
		1,0,0,0,418,416,1,0,0,0,419,117,1,0,0,0,420,422,8,7,0,0,421,420,1,0,0,
		0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,119,1,0,0,0,425,
		426,5,34,0,0,426,427,1,0,0,0,427,428,6,58,6,0,428,121,1,0,0,0,429,431,
		5,13,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,10,
		0,0,433,434,1,0,0,0,434,435,6,59,7,0,435,123,1,0,0,0,436,437,3,10,3,0,
		437,438,1,0,0,0,438,439,6,60,6,0,439,440,6,60,8,0,440,125,1,0,0,0,441,
		442,3,56,26,0,442,443,1,0,0,0,443,444,6,61,9,0,444,127,1,0,0,0,445,446,
		3,86,41,0,446,447,1,0,0,0,447,448,6,62,10,0,448,129,1,0,0,0,449,450,3,
		106,51,0,450,451,1,0,0,0,451,452,6,63,2,0,452,131,1,0,0,0,453,454,3,4,
		0,0,454,455,1,0,0,0,455,456,6,64,11,0,456,133,1,0,0,0,457,458,3,6,1,0,
		458,459,1,0,0,0,459,460,6,65,12,0,460,135,1,0,0,0,461,462,3,54,25,0,462,
		463,1,0,0,0,463,464,6,66,13,0,464,137,1,0,0,0,465,466,3,82,39,0,466,467,
		1,0,0,0,467,468,6,67,14,0,468,139,1,0,0,0,469,470,3,80,38,0,470,471,1,
		0,0,0,471,472,6,68,15,0,472,141,1,0,0,0,473,474,3,74,35,0,474,475,1,0,
		0,0,475,476,6,69,16,0,476,143,1,0,0,0,477,478,3,12,4,0,478,479,1,0,0,0,
		479,480,6,70,17,0,480,145,1,0,0,0,481,482,3,14,5,0,482,483,1,0,0,0,483,
		484,6,71,18,0,484,147,1,0,0,0,485,486,3,16,6,0,486,487,1,0,0,0,487,488,
		6,72,19,0,488,149,1,0,0,0,489,490,3,18,7,0,490,491,1,0,0,0,491,492,6,73,
		20,0,492,151,1,0,0,0,493,494,3,20,8,0,494,495,1,0,0,0,495,496,6,74,21,
		0,496,153,1,0,0,0,497,498,3,22,9,0,498,499,1,0,0,0,499,500,6,75,22,0,500,
		155,1,0,0,0,501,502,3,24,10,0,502,503,1,0,0,0,503,504,6,76,23,0,504,157,
		1,0,0,0,505,506,3,28,12,0,506,507,1,0,0,0,507,508,6,77,24,0,508,159,1,
		0,0,0,509,510,3,30,13,0,510,511,1,0,0,0,511,512,6,78,25,0,512,161,1,0,
		0,0,513,514,3,32,14,0,514,515,1,0,0,0,515,516,6,79,26,0,516,163,1,0,0,
		0,517,518,3,34,15,0,518,519,1,0,0,0,519,520,6,80,27,0,520,165,1,0,0,0,
		521,522,3,36,16,0,522,523,1,0,0,0,523,524,6,81,28,0,524,167,1,0,0,0,525,
		526,3,48,22,0,526,527,1,0,0,0,527,528,6,82,29,0,528,169,1,0,0,0,529,530,
		3,50,23,0,530,531,1,0,0,0,531,532,6,83,30,0,532,171,1,0,0,0,533,534,5,
		34,0,0,534,535,1,0,0,0,535,536,6,84,1,0,536,537,6,84,31,0,537,173,1,0,
		0,0,538,539,3,106,51,0,539,540,1,0,0,0,540,541,6,85,2,0,541,175,1,0,0,
		0,542,548,5,34,0,0,543,547,8,8,0,0,544,545,5,92,0,0,545,547,9,0,0,0,546,
		543,1,0,0,0,546,544,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,
		0,0,0,549,551,1,0,0,0,550,548,1,0,0,0,551,552,5,34,0,0,552,553,1,0,0,0,
		553,554,6,86,32,0,554,177,1,0,0,0,555,557,8,9,0,0,556,555,1,0,0,0,557,
		558,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,6,
		87,32,0,561,179,1,0,0,0,562,564,5,13,0,0,563,562,1,0,0,0,563,564,1,0,0,
		0,564,565,1,0,0,0,565,566,5,10,0,0,566,567,1,0,0,0,567,568,6,88,6,0,568,
		569,6,88,33,0,569,181,1,0,0,0,27,0,1,2,3,240,246,280,289,297,310,324,328,
		334,341,347,360,362,369,392,402,418,423,430,546,548,558,563,34,5,3,0,5,
		1,0,0,1,0,1,54,0,5,2,0,7,11,0,4,0,0,3,0,0,7,12,0,7,35,0,7,50,0,7,9,0,7,
		10,0,7,34,0,7,48,0,7,47,0,7,44,0,7,13,0,7,14,0,7,15,0,7,16,0,7,17,0,7,
		18,0,7,19,0,7,21,0,7,22,0,7,23,0,7,24,0,7,25,0,7,31,0,7,32,0,7,4,0,7,8,
		0,7,54,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
